name: Release Audio Extract

on:
  push:
    tags:
      - 'audio-extract-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog
    
    - name: Set version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ github.event.inputs.prerelease }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/audio-extract-}" >> $GITHUB_OUTPUT
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match "audio-extract-v*" HEAD^ 2>/dev/null || echo "")
        
        if [[ -z "$PREVIOUS_TAG" ]]; then
          echo "No previous tag found, using initial commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        # Generate changelog
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        
        # Get commits between tags
        git log --pretty=format:"* %s by @%an in %h" $PREVIOUS_TAG..HEAD --grep="audio.extract" >> changelog.md || \
        git log --pretty=format:"* %s by @%an in %h" $PREVIOUS_TAG..HEAD -- audio_extract/ >> changelog.md
        
        echo "" >> changelog.md
        echo "## Docker Image" >> changelog.md
        echo "" >> changelog.md
        echo "Pull the image:" >> changelog.md
        echo '```bash' >> changelog.md
        echo "docker pull ghcr.io/${{ github.repository }}/audio-extract:${{ steps.version.outputs.version }}" >> changelog.md
        echo '```' >> changelog.md
        
        # Set output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create configuration archive
      run: |
        cd audio_extract
        tar -czf ../audio-extract-configs.tar.gz \
          audio_extract_config.*.yaml \
          docker-compose*.yml \
          nginx.conf \
          requirements*.txt \
          Makefile
    
    - name: Create documentation archive
      run: |
        cd audio_extract
        tar -czf ../audio-extract-docs.tar.gz \
          README.md \
          docs/ \
          examples/
    
    - name: Build release binaries
      run: |
        cd audio_extract
        
        # Create standalone Python package
        python -m pip install --upgrade pip setuptools wheel
        python setup.py sdist bdist_wheel
        
        # Move to release directory
        mkdir -p ../release
        mv dist/* ../release/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: audio-extract-${{ steps.version.outputs.version }}
        name: Audio Extract ${{ steps.version.outputs.version }}
        body: |
          # Audio Extract ${{ steps.version.outputs.version }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}/audio-extract:${{ steps.version.outputs.version }}
          ```
          
          ### Python Package
          ```bash
          pip install audio-extract==${{ steps.version.outputs.version }}
          ```
          
          ## Configuration
          
          See the attached configuration files for examples of development and production setups.
          
          ## Documentation
          
          Full documentation is available in the `audio-extract-docs.tar.gz` archive.
        draft: false
        prerelease: ${{ steps.version.outputs.is_prerelease }}
        files: |
          audio-extract-configs.tar.gz
          audio-extract-docs.tar.gz
          release/*
    
    - name: Update Docker tags
      env:
        REGISTRY: ghcr.io
        IMAGE_NAME: ${{ github.repository }}/audio-extract
      run: |
        # Login to registry
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
        
        # Pull the SHA-tagged image
        SHA_TAG="sha-${GITHUB_SHA::7}"
        docker pull $REGISTRY/$IMAGE_NAME:$SHA_TAG
        
        # Tag with version
        docker tag $REGISTRY/$IMAGE_NAME:$SHA_TAG $REGISTRY/$IMAGE_NAME:${{ steps.version.outputs.version }}
        
        # Tag as latest if not pre-release
        if [[ "${{ steps.version.outputs.is_prerelease }}" == "false" ]]; then
          docker tag $REGISTRY/$IMAGE_NAME:$SHA_TAG $REGISTRY/$IMAGE_NAME:latest
        fi
        
        # Push tags
        docker push $REGISTRY/$IMAGE_NAME:${{ steps.version.outputs.version }}
        if [[ "${{ steps.version.outputs.is_prerelease }}" == "false" ]]; then
          docker push $REGISTRY/$IMAGE_NAME:latest
        fi
    
    - name: Deploy release notes
      uses: actions/github-script@v7
      with:
        script: |
          // Update repository topics
          await github.rest.repos.replaceAllTopics({
            owner: context.repo.owner,
            repo: context.repo.repo,
            names: ['audio-extraction', 'google-meet', 'ffmpeg', 'gcs', 'docker', 'python']
          });
          
          // Create a discussion for the release
          const discussion = await github.rest.discussions.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            category_id: 'announcements',
            title: `Audio Extract ${context.payload.release.tag_name} Released!`,
            body: `A new version of Audio Extract has been released!\n\n${context.payload.release.body}`
          });
    
    - name: Trigger deployment
      if: steps.version.outputs.is_prerelease == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Trigger production deployment workflow
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-audio-extract.yml',
            ref: 'main',
            inputs: {
              environment: 'production',
              image_tag: '${{ steps.version.outputs.version }}'
            }
          });